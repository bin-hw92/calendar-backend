let mongoose,Schema,bcrypt,jwt;_f39‍.x([["default",()=>_f39‍.o]]);_f39‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);_f39‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_f39‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);



const UserSchema = new Schema({
    username: String,
    hasdedPassword: String,
});


UserSchema.methods.setPassword = async function(password){
    const hash = await bcrypt.hash(password, 10);
    this.hasdedPassword = hash;
};

UserSchema.methods.checkPassword = async function(password){
    const result = await bcrypt.compare(password, this.hasdedPassword);
    return result; // true, false
};

UserSchema.statics.findByUsername = function(username) {
    return this.findOne({ username });
};

UserSchema.methods.serialize = function(){
    const data = this.toJSON();
    delete data.hasdedPassword;
    return data;
}

UserSchema.methods.generateToken = function(){
    const token = jwt.sign(
        //첫 번째 파라미터에는 토큰 안에 집어넣고 싶은 데이터를 넣습니다.
        {
            _id: this.id,
            username: this.username,
        },
        process.env.JWT_SECRET, // 두 번째 파라미터에는 JWT 암호를 넣습니다.
        {
            expiresIn: '7d', // 7일 동안 유요함
        },
    );
    return token;
}

const User = mongoose.model('User', UserSchema);
_f39‍.d(User);
